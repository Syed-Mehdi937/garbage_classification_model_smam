working load model code


FILE = 'C:/Users/legen/Eco_Bins/garbage_classification/models/acc95/model.pth'

import torch
from torchvision import transforms
from PIL import Image

image = Image.open("C:/Users/legen/Eco_Bins/garbage_classification/external/RCP_illustration_1-scaled.jpg")

# Define the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load the model
model = torch.load(FILE, map_location=device)

# Define the transformations to be applied to the image
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

input_tensor = transform(image).unsqueeze(0)
# Apply the transformations to the image

# Pass the image to the model to get the predicted class
with torch.no_grad():
    output = model(input_tensor.to(device))

# Convert the output to a probability distribution
probs = torch.softmax(output, dim=1)

# Get the predicted class
pred_class = torch.argmax(probs).item()

# Print the predicted class
print("The predicted class is:", pred_class)



